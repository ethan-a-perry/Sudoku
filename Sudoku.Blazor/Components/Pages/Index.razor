@page "/"

@rendermode InteractiveServer

@using Sudoku.DataAccess.Enums
@using Sudoku.DataAccess.Models

<div class="grid" tabindex="-1" @onkeydown="OnKeyDown" @onkeyup="OnKeyUp" @onkeydown:preventDefault="true">
    @foreach (var cell in grid.Cells) {
        var row = cell.Row;
        var col = cell.Col;
        <div
            class="cell @GetBorderClasses(row, col)"
            aria-selected="@(grid.Cells[row, col].IsSelected ? "true" : "false")"
            @onmousedown="e => OnMouseDown(e, row, col)"
            @onmouseup="() => OnMouseUp()"
            @onmouseenter="() => OnMouseEnter(row, col)">
            @grid.Cells[row, col].Value
        </div>
    }
</div>

@code {
    private GridModel grid = new();

    private bool isMouseDown;
    private bool isShiftKeyDown;
    
    private string GetBorderClasses(int row, int col) {
        var borders = grid.Cells[row, col].Borders;
        
        return string.Join(
            " ",
            Enum.GetValues(typeof(Borders))
                .Cast<Borders>()
                .Where(flag =>
                    flag != Borders.None
                    && borders.HasFlag(flag)
                    && IsPowerOfTwo((int)flag)
                )
                .Select(flag => flag.ToString().ToLower())
            );
    }

    private bool IsPowerOfTwo(int value) {
        return (value & (value - 1)) == 0;
    }
    
    private void OnMouseDown(MouseEventArgs e, int row, int col) {
        if (e.Button != 0) return;
        
        isMouseDown = true;

        if (isShiftKeyDown) {
            grid.Mode = grid.Cells[row, col].IsSelected switch {
                true => GridMode.Delete,
                false => GridMode.Select
            };
        }
        
        grid.SortSelection(grid.Cells[row, col]);
    }

    private void OnMouseUp() {
        isMouseDown = false;
        grid.Mode = GridMode.Regular;
    }

    private void OnMouseEnter(int row, int col) {
        if (!isMouseDown) return;

        if (grid.Mode == GridMode.Regular) {
            grid.Mode = GridMode.Select;
        }
        
        grid.SortSelection(grid.Cells[row, col]);
    }

    private void OnKeyDown(KeyboardEventArgs e) {
        isShiftKeyDown = e.ShiftKey;

        switch (e.Key) {
            case { Length: 1 }:
                grid.SetCell(e.Key.ToUpper()[0]);
                break;
            case "Backspace":
                grid.SetCell('\0');
                break;
            case "ArrowUp" or "ArrowRight" or "ArrowDown" or "ArrowLeft":
                grid.TraverseGrid(e.Key);
                break;
        }
    }

    private void OnKeyUp(KeyboardEventArgs e) {
        isShiftKeyDown = e.ShiftKey;
    }
}