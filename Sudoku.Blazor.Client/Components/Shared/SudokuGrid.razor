@using Sudoku.Core.Models
<div class="sudoku">
    <div class="grid @(_isSolved ? "solved" : "")" tabindex="-1" @onkeydown="_currentSession.InputManager.OnKeyDown" @onkeyup="_currentSession.InputManager.OnKeyUp" @onkeydown:preventDefault="true">
    
        @{ var cells = _currentSession?.Grid != null ? _currentSession.Grid.GetCells() : new Grid().GetCells(); }
        @foreach (var cell in cells) {
            var row = cell.Row;
            var col = cell.Col;
            <div
                class="cell"
                aria-selected="@(_currentSession.SelectionManager.IsCellSelected(cell) ? "true" : "false")"
                @onmousedown="e => _currentSession.InputManager.OnMouseDown(e, row, col)"
                @onmouseup="() => _currentSession.InputManager.OnMouseUp()"
                @onmouseenter="() => _currentSession.InputManager.OnMouseEnter(row, col)">
            
                @if (cell.Value is not '\0') {
                    @cell.Value
                }
                else {
                    if (cell.PencilMarks.Corner.Count > 0) {
                        int index = 1;
                        <div class="pencil-marks corner">
                            @foreach (var pencilMark in cell.PencilMarks.Corner) {
                                <span class="pencil-mark @($"p{index}")">@pencilMark</span>
                                index++;
                            }
                        </div>
                    }
            
                    if (cell.PencilMarks.Center.Count > 0) {
                        <div class="pencil-marks center @(cell.PencilMarks.Center.Count == 8 ? "eight-digits" : "") @(cell.PencilMarks.Center.Count == 9 ? "nine-digits" : "")">
                            @foreach (var pencilMark in cell.PencilMarks.Center) {
                                <span class="pencil-mark">@pencilMark</span>
                            }
                        </div>
                    }
                }
            </div>
        }
    </div>

    <button @onclick="_currentSession.InputManager.Undo">Undo</button>
    <button @onclick="_currentSession.InputManager.Redo">Redo</button>
    
    <div class="digits @_currentSession.InputManager.InputMode.ToString().ToLower()">
        @for (int i = 1; i <= 9; i++) {
            var value = (char)('0' + i);
            <button @onclick="() => _currentSession.InputManager.HandleSet(value)">
                <span class="@("p" + i)">@i</span>
            </button>
        }
    </div>
    
    <ul>
        @foreach (var puzzle in _puzzles) {
            <li @onclick="@(() => LoadSession(puzzle))">@puzzle.Title by @puzzle.Constructor</li>
        }
    </ul>
    
    <a @onclick="Solve">Check solution</a>
    
    <button @onclick="Restart">Restart</button>
</div>